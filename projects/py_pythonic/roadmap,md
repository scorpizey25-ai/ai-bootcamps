<div align="center">

# 🐍✨ Roadmap Pythonic untuk Machine Learning

📘 *Belajar menulis kode Python yang **rapih, ringkas, dan maintainable** untuk ML Workflow.*  

</div>

---

## 🌱 Beginner (Dasar)
> 🎯 Fokus: syntax Pythonic dasar, sering dipakai di preprocessing & eksplorasi data.

✅ **Materi Utama**
- 🔹 Built-in functions → `len`, `sum`, `max`, `min`, `sorted`, `enumerate`, `any`, `all`, `zip`
- 🔹 String & list ops → `join`, `split`, `strip`, slicing
- 🔹 Tuple unpacking → `(X_train, X_test, y_train, y_test)`
- 🔹 List & dict comprehension sederhana
- 🔹 F-strings untuk logging hasil training
- 🔹 Loop Pythonic → `for item in items` ketimbang index manual
- 🔹 `with` statement untuk file dataset

📌 **Contoh di ML**
```python
# filtering data
data = [1,2,3,4,5,6,7,8]
filtered = [x for x in data if x % 2 == 0]  
print(filtered)  # [2,4,6,8]

# zip feature dan label
features = [1,2,3]
labels = [0,1,0]
dataset = list(zip(features, labels))
print(dataset)  # [(1,0), (2,1), (3,0)]
```

---

## ⚡ Medium (Menengah)
> 🎯 Fokus: idiom lebih dalam, sering dipakai saat **pipeline data & model management**.

✅ **Materi Utama**
- 🔹 Nested & conditional comprehensions
- 🔹 Set comprehension `{x for x in data}`
- 🔹 `enumerate` & `zip` untuk looping dataset
- 🔹 Dictionary tricks → `.get()`, `.setdefault()`, `defaultdict`
- 🔹 Packing & unpacking → `*args`, `**kwargs`
- 🔹 Sorting dengan `key` + lambda
- 🔹 Ternary expression → `status = "OK" if score>60 else "Fail"`
- 🔹 Flattening data dengan comprehension
- 🔹 Pathlib untuk file dataset
- 🔹 Context manager `with` untuk checkpoint

📌 **Contoh di ML**
```python
import pathlib

# load semua file gambar dari folder dataset
data_dir = pathlib.Path("dataset/images")
files = [f for f in data_dir.glob("*.jpg")]

# dictionary comprehension untuk mapping label
labels = ["cat", "dog", "cat"]
mapping = {i: label for i, label in enumerate(labels)}
print(mapping)  # {0: 'cat', 1: 'dog', 2: 'cat'}
```

---

## 🚀 Advanced (Lanjutan)
> 🎯 Fokus: optimasi pipeline, resource management, & clean code ala ML Engineer.

✅ **Materi Utama**
- 🔹 Generators & `yield` → batch data loading (hemat RAM)
- 🔹 Generator expressions `(x**2 for x in range(10))`
- 🔹 Itertools & functools (`chain`, `groupby`, `reduce`, `partial`)
- 🔹 Decorators → logging training, caching
- 🔹 Context managers custom (`__enter__`, `__exit__`)
- 🔹 Dataclasses → definisi config model
- 🔹 Type hints & annotations → kolaborasi tim
- 🔹 Dunder methods → bikin custom Dataset class (PyTorch style)
- 🔹 Pattern matching (Python 3.10+)
- 🔹 Async/await → paralel data loading / API model
- 🔹 PEP8 & clean code best practices

📌 **Contoh di ML**
```python
# Generator untuk batch data
def batch_generator(data, batch_size):
    for i in range(0, len(data), batch_size):
        yield data[i:i+batch_size]

data = list(range(100))
for batch in batch_generator(data, 10):
    print(batch)  # tiap iterasi keluar batch size 10
```

---

## 🎓 Ringkasan
- 🌱 **Beginner → Medium**: selalu dipakai di preprocessing, training, evaluasi.  
- 🚀 **Advanced**: penting untuk pipeline besar, efisiensi, & production ML deployment.  

---

✨ Dibuat dengan ❤️ untuk perjalanan Machine Learning mu!  
